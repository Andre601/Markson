plugins {
    id 'java'
    id 'java-library'
    id 'idea'
    id 'maven'
    id 'com.github.johnrengelman.shadow' version '5.2.0'
}

def ver = new Version(major: 0, minor: 0, revision: '4-BETA')

group "com.andre601"
version "$ver"

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8

repositories {
    mavenLocal()
    jcenter()
    maven{ url = 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/' }
    maven{ url = 'https://oss.sonatype.org/content/repositories/snapshots' }
}

jar{
    getArchiveFileName().set("Markson.jar")
}

dependencies {
    compile(group: 'org.spigotmc', name: 'spigot-api', version: '1.15.1-R0.1-SNAPSHOT')
    compile(group: 'net.kyori', name: 'text-api', version: '3.0.3')
    compile(group: 'net.kyori', name: 'text-serializer-gson', version: '3.0.3')
    compile(group: 'org.json', name: 'json', version: '20190722')
}

task sourcesJar(type: Jar, dependsOn: classes){
    getArchiveClassifier().set("sources")
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc){
    getArchiveClassifier().set("javadoc")
    from(javadoc.destinationDir)
}

artifacts{
    archives sourcesJar
    archives javadocJar
    archives shadowJar
}

javadoc{
    source = sourceSets.main.allJava
    destinationDir = file("$projectDir/docs/")
    options.encoding = 'UTF-8'
    options.memberLevel = JavadocMemberLevel.PROTECTED
    
    if(options instanceof StandardJavadocDocletOptions){
        def opt = options as StandardJavadocDocletOptions
        
        opt.links(
                "https://docs.oracle.com/javase/8/docs/api/",
                "https://hub.spigotmc.org/javadocs/spigot/"
        )
        
        if(JavaVersion.current().isJava9Compatible()){
            opt.addBooleanOption("html5", true)
            opt.addStringOption("-release", "8")
        }
        if(JavaVersion.current().isJava11Compatible()){
            opt.addBooleanOption("-no-module-directories", true)
        }
    }
}

build{
    dependsOn(jar)
    dependsOn(javadocJar)
    dependsOn(sourcesJar)
    dependsOn(shadowJar)
}

class Version{
    String major, minor, revision
    
    static String getBuild(){
        System.getenv("BUILD_NUMBER") ? "_" + System.getenv("BUILD_NUMBER") :
        System.getProperty("BUILD_NUMBER") ? "_" + System.getProperty("BUILD_NUMBER") : ""
    }
    
    String toString(){
        "$major.$minor.${revision}$build"
    }
}